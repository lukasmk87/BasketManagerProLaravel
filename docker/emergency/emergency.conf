# Emergency Services Server Configuration
# High-performance configuration for emergency access

server {
    listen 80;
    server_name _;
    root /var/www/html/public;
    index index.php index.html;

    # Security and performance
    client_max_body_size 10M;
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;

    # Rate limiting for emergency endpoints
    location ~ ^/emergency/ {
        limit_req zone=emergency_access burst=20 nodelay;
        limit_conn emergency_conn 10;
        
        # CORS headers for emergency PWA
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,X-Emergency-Sync' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        try_files $uri $uri/ /index.php?$query_string;
    }

    # API endpoints with stricter rate limiting
    location ~ ^/api/emergency/ {
        limit_req zone=access_key burst=30 nodelay;
        limit_conn emergency_conn 20;

        # Emergency API headers
        add_header X-Emergency-API "v1" always;
        
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Static emergency assets (cached heavily)
    location ~* ^/images/emergency.*\.(png|jpg|jpeg|gif|svg|ico)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Emergency-Asset "cached" always;
    }

    # Emergency QR codes (short cache for security)
    location ~* ^/storage/emergency_qr/.*\.png$ {
        expires 1h;
        add_header Cache-Control "private, no-transform";
        add_header X-Emergency-QR "active" always;
        
        # Security: only allow access with valid session or API key
        access_log /var/log/nginx/qr_access.log emergency;
    }

    # Service Worker files (no cache for updates)
    location ~* /emergency/pwa/sw/.*\.js$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header X-Emergency-SW "active" always;
        
        try_files $uri /index.php?$query_string;
    }

    # PWA Manifest files
    location ~* /emergency/pwa/manifest/.*$ {
        expires 1h;
        add_header Cache-Control "private, no-transform";
        add_header Content-Type "application/manifest+json" always;
        
        try_files $uri /index.php?$query_string;
    }

    # General PHP processing
    location ~ \.php$ {
        # Security: don't allow direct access to PHP files in sensitive directories
        location ~ ^/(storage|vendor|tests|database)/.+\.php$ {
            return 403;
        }

        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass emergency_backend;
        fastcgi_index index.php;
        
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        
        # Emergency service specific FastCGI settings
        fastcgi_connect_timeout 10s;
        fastcgi_send_timeout 30s;
        fastcgi_read_timeout 30s;
        fastcgi_buffer_size 32k;
        fastcgi_buffers 8 32k;
        fastcgi_busy_buffers_size 64k;
        
        # Emergency request headers
        fastcgi_param HTTP_X_EMERGENCY_REQUEST "true";
        fastcgi_param HTTP_X_REQUEST_START $msec;
    }

    # Static files with optimized caching
    location ~* \.(css|js|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Static-Cache "hit" always;
        
        # Compress CSS and JS
        gzip_static on;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "Emergency services healthy\n";
        add_header Content-Type text/plain;
        add_header X-Emergency-Health "ok" always;
    }

    # Emergency metrics endpoint (for monitoring)
    location /metrics/emergency {
        access_log off;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        try_files $uri /index.php?$query_string;
    }

    # Block sensitive files
    location ~ /\.(?!well-known).* {
        deny all;
    }
    
    location ~ ^/(\.env|composer\.json|composer\.lock|package\.json)$ {
        deny all;
    }

    # Block direct access to Laravel files
    location ~ ^/(artisan|server\.php)$ {
        deny all;
    }

    # Custom error pages for emergency context
    error_page 404 /emergency/404;
    error_page 500 502 503 504 /emergency/error;

    # Log emergency access attempts
    location ~ ^/emergency/access/ {
        access_log /var/log/nginx/emergency_access.log emergency;
        try_files $uri $uri/ /index.php?$query_string;
    }
}

# HTTPS server configuration (for production)
server {
    listen 443 ssl http2;
    server_name _;
    root /var/www/html/public;
    index index.php index.html;

    # SSL configuration (certificates should be mounted)
    ssl_certificate /etc/ssl/certs/emergency.crt;
    ssl_certificate_key /etc/ssl/private/emergency.key;
    
    # SSL optimization
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    
    # HSTS for emergency security
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Include all the same location blocks as HTTP
    include /etc/nginx/emergency-locations.conf;
}