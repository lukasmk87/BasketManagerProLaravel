/**
 * BasketManager Pro API JavaScript SDK
 * 
 * Enterprise Basketball Club Management API with multi-tenant architecture, real-time scoring, and comprehensive statistics.
 * 
 * API Version: 4.0
 * SDK Version: 1.0.0
 * Generated: {date('Y-m-d H:i:s')} UTC
 * 
 * @package BasketManagerPro
 * @author Auto-generated from OpenAPI specification
 * @link https://basketmanager-pro.com/api/documentation
 */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD
        define(['axios'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node.js/CommonJS
        module.exports = factory(require('axios'));
    } else {
        // Browser global
        root.BasketManagerPro = factory(root.axios);
    }
}(typeof self !== 'undefined' ? self : this, function (axios) {
    'use strict';
    /**
     * BasketManager Pro API Client
     */
    class BasketManagerProClient {
        /**
         * Initialize the API client
         * 
         * @param {string} apiKey - Your API key
         * @param {string} baseUrl - Optional custom base URL
         * @param {Object} options - Additional axios options
         */
        constructor(apiKey, baseUrl = 'https://staging.basketmanager-pro.de//api', options = {}) {
            this.apiKey = apiKey;
            this.baseUrl = baseUrl.replace(/\/$/, '');
            this.sdkVersion = '1.0.0';

            // Create axios instance
            this.http = axios.create({
                baseURL: this.baseUrl,
                timeout: 30000,
                headers: {
                    'Authorization': `Bearer ${apiKey}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'User-Agent': `BasketManagerPro-JS-SDK/${this.sdkVersion}`
                },
                ...options
            });

            // Add response interceptor for error handling
            this.http.interceptors.response.use(
                response => response,
                error => this.handleError(error)
            );

            // Initialize resource classes
            this.teams = new Teams(this);
            this.players = new Players(this);
            this.games = new Games(this);
            this.clubs = new Clubs(this);
            this.tournaments = new Tournaments(this);
            this.training = new Training(this);
            this.videos = new Videos(this);
            this.analytics = new Analytics(this);
        }

        /**
         * Make HTTP request to the API
         * 
         * @param {string} method - HTTP method
         * @param {string} endpoint - API endpoint
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async request(method, endpoint, options = {}) {
            try {
                const response = await this.http.request({
                    method: method.toUpperCase(),
                    url: endpoint,
                    ...options
                });
                
                return response.data;
            } catch (error) {
                throw this.handleError(error);
            }
        }

        /**
         * Handle API errors
         * 
         * @param {Error} error - The error object
         * @returns {ApiException} Formatted error
         */
        handleError(error) {
            if (!error.response) {
                return new ApiException('Network error: ' + error.message);
            }

            const status = error.response.status;
            const data = error.response.data;
            const message = data?.message || 'Unknown API error';
            const errors = data?.errors || {};

            switch (status) {
                case 400:
                    return new BadRequestException(message, errors);
                case 401:
                    return new UnauthorizedException(message);
                case 403:
                    return new ForbiddenException(message);
                case 404:
                    return new NotFoundException(message);
                case 422:
                    return new ValidationException(message, errors);
                case 429:
                    return new RateLimitException(message);
                default:
                    return new ApiException(message, status, errors);
            }
        }

        /**
         * Update API key
         * 
         * @param {string} apiKey - New API key
         */
        setApiKey(apiKey) {
            this.apiKey = apiKey;
            this.http.defaults.headers['Authorization'] = `Bearer ${apiKey}`;
        }

        /**
         * Get SDK version
         * 
         * @returns {string} SDK version
         */
        getSdkVersion() {
            return this.sdkVersion;
        }

        /**
         * Get API base URL
         * 
         * @returns {string} Base URL
         */
        getBaseUrl() {
            return this.baseUrl;
        }

        /**
         * Test API connection
         * 
         * @returns {Promise<Object>} API status information
         */
        async ping() {
            return await this.request('GET', '/v4/documentation/ping');
        }
    }

    /**
     * Authentication resource
     */
    class Authentication {
        constructor(client) {
            this.client = client;
        }

        /**
         * Login auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthLogin() {
            return await this.client.request('POST', `/api/v1/auth/login`, {});
        }

        /**
         * Register auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthRegister() {
            return await this.client.request('POST', `/api/v1/auth/register`, {});
        }

        /**
         * Logout auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthLogout() {
            return await this.client.request('POST', `/api/v1/auth/logout`, {});
        }

        /**
         * Refresh auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthRefresh() {
            return await this.client.request('POST', `/api/v1/auth/refresh`, {});
        }

        /**
         * User auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getauthUser() {
            return await this.client.request('GET', `/api/v1/auth/user`, {});
        }

        /**
         * User auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headauthUser() {
            return await this.client.request('HEAD', `/api/v1/auth/user`, {});
        }

        /**
         * Login auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthLogin() {
            return await this.client.request('POST', `/api/v4/auth/login`, {});
        }

        /**
         * Register auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthRegister() {
            return await this.client.request('POST', `/api/v4/auth/register`, {});
        }

        /**
         * Logout auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthLogout() {
            return await this.client.request('POST', `/api/v4/auth/logout`, {});
        }

        /**
         * Refresh auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthRefresh() {
            return await this.client.request('POST', `/api/v4/auth/refresh`, {});
        }

        /**
         * User auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getauthUser() {
            return await this.client.request('GET', `/api/v4/auth/user`, {});
        }

        /**
         * User auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headauthUser() {
            return await this.client.request('HEAD', `/api/v4/auth/user`, {});
        }

        /**
         * ForgotPassword auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthForgotPassword() {
            return await this.client.request('POST', `/api/v4/auth/forgot-password`, {});
        }

        /**
         * ResetPassword auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthResetPassword() {
            return await this.client.request('POST', `/api/v4/auth/reset-password`, {});
        }

        /**
         * VerifyEmail auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthVerifyEmail() {
            return await this.client.request('POST', `/api/v4/auth/verify-email`, {});
        }

        /**
         * ResendVerification auth
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postauthResendVerification() {
            return await this.client.request('POST', `/api/v4/auth/resend-verification`, {});
        }

    }

    /**
     * Teams resource
     */
    class Teams {
        constructor(client) {
            this.client = client;
        }

        /**
         * List all team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamIndex(options = {}) {
            return await this.client.request('GET', `/api/v1/teams`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v1/teams`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postteamStore(options = {}) {
            return await this.client.request('POST', `/api/v1/teams`, { data: options.data || options });
        }

        /**
         * Get specific team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamShow(team) {
            return await this.client.request('GET', `/api/v1/teams/${team}`, {});
        }

        /**
         * Get specific team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamShow(team) {
            return await this.client.request('HEAD', `/api/v1/teams/${team}`, {});
        }

        /**
         * Update team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putteamUpdate(team, options = {}) {
            return await this.client.request('PUT', `/api/v1/teams/${team}`, { data: options.data || options });
        }

        /**
         * Update team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchteamUpdate(team, options = {}) {
            return await this.client.request('PATCH', `/api/v1/teams/${team}`, { data: options.data || options });
        }

        /**
         * Players team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamPlayers(team) {
            return await this.client.request('GET', `/api/v1/teams/${team}/players`, {});
        }

        /**
         * Players team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamPlayers(team) {
            return await this.client.request('HEAD', `/api/v1/teams/${team}/players`, {});
        }

        /**
         * Games team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamGames(team) {
            return await this.client.request('GET', `/api/v1/teams/${team}/games`, {});
        }

        /**
         * Games team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamGames(team) {
            return await this.client.request('HEAD', `/api/v1/teams/${team}/games`, {});
        }

        /**
         * Get specific team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamShow(team) {
            return await this.client.request('GET', `/api/v1/public/teams/${team}`, {});
        }

        /**
         * Get specific team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamShow(team) {
            return await this.client.request('HEAD', `/api/v1/public/teams/${team}`, {});
        }

        /**
         * Players team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamPlayers(team) {
            return await this.client.request('GET', `/api/v1/public/teams/${team}/players`, {});
        }

        /**
         * Players team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamPlayers(team) {
            return await this.client.request('HEAD', `/api/v1/public/teams/${team}/players`, {});
        }

        /**
         * List all team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamIndex(options = {}) {
            return await this.client.request('GET', `/api/v4/teams`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v4/teams`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postteamStore(options = {}) {
            return await this.client.request('POST', `/api/v4/teams`, { data: options.data || options });
        }

        /**
         * Get specific team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamShow(team) {
            return await this.client.request('GET', `/api/v4/teams/${team}`, {});
        }

        /**
         * Get specific team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamShow(team) {
            return await this.client.request('HEAD', `/api/v4/teams/${team}`, {});
        }

        /**
         * Update team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putteamUpdate(team, options = {}) {
            return await this.client.request('PUT', `/api/v4/teams/${team}`, { data: options.data || options });
        }

        /**
         * Update team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchteamUpdate(team, options = {}) {
            return await this.client.request('PATCH', `/api/v4/teams/${team}`, { data: options.data || options });
        }

        /**
         * Delete team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deleteteamDestroy(team) {
            return await this.client.request('DELETE', `/api/v4/teams/${team}`, {});
        }

        /**
         * Players team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamPlayers(team) {
            return await this.client.request('GET', `/api/v4/teams/${team}/players`, {});
        }

        /**
         * Players team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamPlayers(team) {
            return await this.client.request('HEAD', `/api/v4/teams/${team}/players`, {});
        }

        /**
         * Games team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamGames(team) {
            return await this.client.request('GET', `/api/v4/teams/${team}/games`, {});
        }

        /**
         * Games team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamGames(team) {
            return await this.client.request('HEAD', `/api/v4/teams/${team}/games`, {});
        }

        /**
         * Statistics team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamStatistics(team) {
            return await this.client.request('GET', `/api/v4/teams/${team}/statistics`, {});
        }

        /**
         * Statistics team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamStatistics(team) {
            return await this.client.request('HEAD', `/api/v4/teams/${team}/statistics`, {});
        }

        /**
         * Analytics team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamAnalytics(team) {
            return await this.client.request('GET', `/api/v4/teams/${team}/analytics`, {});
        }

        /**
         * Analytics team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamAnalytics(team) {
            return await this.client.request('HEAD', `/api/v4/teams/${team}/analytics`, {});
        }

        /**
         * InvitePlayer team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postteamInvitePlayer(team) {
            return await this.client.request('POST', `/api/v4/teams/${team}/invite-player`, {});
        }

        /**
         * PerformanceTrends team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamPerformanceTrends(team) {
            return await this.client.request('GET', `/api/v4/teams/${team}/performance-trends`, {});
        }

        /**
         * PerformanceTrends team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamPerformanceTrends(team) {
            return await this.client.request('HEAD', `/api/v4/teams/${team}/performance-trends`, {});
        }

        /**
         * Get specific team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamShow(team) {
            return await this.client.request('GET', `/api/v4/public/teams/${team}`, {});
        }

        /**
         * Get specific team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamShow(team) {
            return await this.client.request('HEAD', `/api/v4/public/teams/${team}`, {});
        }

        /**
         * Players team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamPlayers(team) {
            return await this.client.request('GET', `/api/v4/public/teams/${team}/players`, {});
        }

        /**
         * Players team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamPlayers(team) {
            return await this.client.request('HEAD', `/api/v4/public/teams/${team}/players`, {});
        }

        /**
         * Games team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamGames(team) {
            return await this.client.request('GET', `/api/v4/public/teams/${team}/games`, {});
        }

        /**
         * Games team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamGames(team) {
            return await this.client.request('HEAD', `/api/v4/public/teams/${team}/games`, {});
        }

        /**
         * PublicStats team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getteamPublicStats(team) {
            return await this.client.request('GET', `/api/v4/public/teams/${team}/public-stats`, {});
        }

        /**
         * PublicStats team
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headteamPublicStats(team) {
            return await this.client.request('HEAD', `/api/v4/public/teams/${team}/public-stats`, {});
        }

    }

    /**
     * Players resource
     */
    class Players {
        constructor(client) {
            this.client = client;
        }

        /**
         * List all player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getplayerIndex(options = {}) {
            return await this.client.request('GET', `/api/v1/players`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headplayerIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v1/players`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postplayerStore(options = {}) {
            return await this.client.request('POST', `/api/v1/players`, { data: options.data || options });
        }

        /**
         * Get specific player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getplayerShow(player) {
            return await this.client.request('GET', `/api/v1/players/${player}`, {});
        }

        /**
         * Get specific player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headplayerShow(player) {
            return await this.client.request('HEAD', `/api/v1/players/${player}`, {});
        }

        /**
         * Update player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putplayerUpdate(player, options = {}) {
            return await this.client.request('PUT', `/api/v1/players/${player}`, { data: options.data || options });
        }

        /**
         * Update player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchplayerUpdate(player, options = {}) {
            return await this.client.request('PATCH', `/api/v1/players/${player}`, { data: options.data || options });
        }

        /**
         * Games player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getplayerGames(player) {
            return await this.client.request('GET', `/api/v1/players/${player}/games`, {});
        }

        /**
         * Games player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headplayerGames(player) {
            return await this.client.request('HEAD', `/api/v1/players/${player}/games`, {});
        }

        /**
         * List all player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getplayerIndex(options = {}) {
            return await this.client.request('GET', `/api/v4/players`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headplayerIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v4/players`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postplayerStore(options = {}) {
            return await this.client.request('POST', `/api/v4/players`, { data: options.data || options });
        }

        /**
         * Get specific player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getplayerShow(player) {
            return await this.client.request('GET', `/api/v4/players/${player}`, {});
        }

        /**
         * Get specific player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headplayerShow(player) {
            return await this.client.request('HEAD', `/api/v4/players/${player}`, {});
        }

        /**
         * Update player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putplayerUpdate(player, options = {}) {
            return await this.client.request('PUT', `/api/v4/players/${player}`, { data: options.data || options });
        }

        /**
         * Update player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchplayerUpdate(player, options = {}) {
            return await this.client.request('PATCH', `/api/v4/players/${player}`, { data: options.data || options });
        }

        /**
         * Delete player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deleteplayerDestroy(player) {
            return await this.client.request('DELETE', `/api/v4/players/${player}`, {});
        }

        /**
         * Statistics player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getplayerStatistics(player) {
            return await this.client.request('GET', `/api/v4/players/${player}/statistics`, {});
        }

        /**
         * Statistics player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headplayerStatistics(player) {
            return await this.client.request('HEAD', `/api/v4/players/${player}/statistics`, {});
        }

        /**
         * Games player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getplayerGames(player) {
            return await this.client.request('GET', `/api/v4/players/${player}/games`, {});
        }

        /**
         * Games player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headplayerGames(player) {
            return await this.client.request('HEAD', `/api/v4/players/${player}/games`, {});
        }

        /**
         * Transfer player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postplayerTransfer(player) {
            return await this.client.request('POST', `/api/v4/players/${player}/transfer`, {});
        }

        /**
         * Analytics player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getplayerAnalytics(player) {
            return await this.client.request('GET', `/api/v4/players/${player}/analytics`, {});
        }

        /**
         * Analytics player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headplayerAnalytics(player) {
            return await this.client.request('HEAD', `/api/v4/players/${player}/analytics`, {});
        }

        /**
         * InjuryRisk player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getplayerInjuryRisk(player) {
            return await this.client.request('GET', `/api/v4/players/${player}/injury-risk`, {});
        }

        /**
         * InjuryRisk player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headplayerInjuryRisk(player) {
            return await this.client.request('HEAD', `/api/v4/players/${player}/injury-risk`, {});
        }

        /**
         * PerformancePredictions player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getplayerPerformancePredictions(player) {
            return await this.client.request('GET', `/api/v4/players/${player}/performance-predictions`, {});
        }

        /**
         * PerformancePredictions player
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headplayerPerformancePredictions(player) {
            return await this.client.request('HEAD', `/api/v4/players/${player}/performance-predictions`, {});
        }

    }

    /**
     * Games resource
     */
    class Games {
        constructor(client) {
            this.client = client;
        }

        /**
         * List all game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameIndex(options = {}) {
            return await this.client.request('GET', `/api/v1/games`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v1/games`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postgameStore(options = {}) {
            return await this.client.request('POST', `/api/v1/games`, { data: options.data || options });
        }

        /**
         * Get specific game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameShow(game) {
            return await this.client.request('GET', `/api/v1/games/${game}`, {});
        }

        /**
         * Get specific game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameShow(game) {
            return await this.client.request('HEAD', `/api/v1/games/${game}`, {});
        }

        /**
         * Update game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putgameUpdate(game, options = {}) {
            return await this.client.request('PUT', `/api/v1/games/${game}`, { data: options.data || options });
        }

        /**
         * Update game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchgameUpdate(game, options = {}) {
            return await this.client.request('PATCH', `/api/v1/games/${game}`, { data: options.data || options });
        }

        /**
         * LiveScore game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameLiveScore(game) {
            return await this.client.request('GET', `/api/v1/games/${game}/live-score`, {});
        }

        /**
         * LiveScore game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameLiveScore(game) {
            return await this.client.request('HEAD', `/api/v1/games/${game}/live-score`, {});
        }

        /**
         * Get specific game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameShow(game) {
            return await this.client.request('GET', `/api/v1/public/games/${game}`, {});
        }

        /**
         * Get specific game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameShow(game) {
            return await this.client.request('HEAD', `/api/v1/public/games/${game}`, {});
        }

        /**
         * LiveScore game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameLiveScore(game) {
            return await this.client.request('GET', `/api/v1/public/games/${game}/live-score`, {});
        }

        /**
         * LiveScore game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameLiveScore(game) {
            return await this.client.request('HEAD', `/api/v1/public/games/${game}/live-score`, {});
        }

        /**
         * List all game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameIndex(options = {}) {
            return await this.client.request('GET', `/api/v4/games`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v4/games`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postgameStore(options = {}) {
            return await this.client.request('POST', `/api/v4/games`, { data: options.data || options });
        }

        /**
         * Get specific game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameShow(game) {
            return await this.client.request('GET', `/api/v4/games/${game}`, {});
        }

        /**
         * Get specific game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameShow(game) {
            return await this.client.request('HEAD', `/api/v4/games/${game}`, {});
        }

        /**
         * Update game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putgameUpdate(game, options = {}) {
            return await this.client.request('PUT', `/api/v4/games/${game}`, { data: options.data || options });
        }

        /**
         * Update game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchgameUpdate(game, options = {}) {
            return await this.client.request('PATCH', `/api/v4/games/${game}`, { data: options.data || options });
        }

        /**
         * Delete game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deletegameDestroy(game) {
            return await this.client.request('DELETE', `/api/v4/games/${game}`, {});
        }

        /**
         * LiveScore game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameLiveScore(game) {
            return await this.client.request('GET', `/api/v4/games/${game}/live-score`, {});
        }

        /**
         * LiveScore game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameLiveScore(game) {
            return await this.client.request('HEAD', `/api/v4/games/${game}/live-score`, {});
        }

        /**
         * RealTimeData game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameRealTimeData(game) {
            return await this.client.request('GET', `/api/v4/games/${game}/real-time-data`, {});
        }

        /**
         * RealTimeData game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameRealTimeData(game) {
            return await this.client.request('HEAD', `/api/v4/games/${game}/real-time-data`, {});
        }

        /**
         * StartBroadcast game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postgameStartBroadcast(game) {
            return await this.client.request('POST', `/api/v4/games/${game}/broadcast`, {});
        }

        /**
         * List all gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameStatisticIndex(options = {}) {
            return await this.client.request('GET', `/api/v4/game-statistics`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameStatisticIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v4/game-statistics`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postgameStatisticStore(options = {}) {
            return await this.client.request('POST', `/api/v4/game-statistics`, { data: options.data || options });
        }

        /**
         * Get specific gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameStatisticShow(gameStatistic) {
            return await this.client.request('GET', `/api/v4/game-statistics/${gameStatistic}`, {});
        }

        /**
         * Get specific gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameStatisticShow(gameStatistic) {
            return await this.client.request('HEAD', `/api/v4/game-statistics/${gameStatistic}`, {});
        }

        /**
         * Update gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putgameStatisticUpdate(gameStatistic, options = {}) {
            return await this.client.request('PUT', `/api/v4/game-statistics/${gameStatistic}`, { data: options.data || options });
        }

        /**
         * Update gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchgameStatisticUpdate(gameStatistic, options = {}) {
            return await this.client.request('PATCH', `/api/v4/game-statistics/${gameStatistic}`, { data: options.data || options });
        }

        /**
         * Delete gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deletegameStatisticDestroy(gameStatistic) {
            return await this.client.request('DELETE', `/api/v4/game-statistics/${gameStatistic}`, {});
        }

        /**
         * BulkStore gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postgameStatisticBulkStore() {
            return await this.client.request('POST', `/api/v4/game-statistics/bulk`, {});
        }

        /**
         * PlayerGameStats gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameStatisticPlayerGameStats(game, player) {
            return await this.client.request('GET', `/api/v4/game-statistics/${game}/player/${player}`, {});
        }

        /**
         * PlayerGameStats gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameStatisticPlayerGameStats(game, player) {
            return await this.client.request('HEAD', `/api/v4/game-statistics/${game}/player/${player}`, {});
        }

        /**
         * AdvancedMetrics gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameStatisticAdvancedMetrics(game) {
            return await this.client.request('GET', `/api/v4/game-statistics/${game}/advanced-metrics`, {});
        }

        /**
         * AdvancedMetrics gamestatistic
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameStatisticAdvancedMetrics(game) {
            return await this.client.request('HEAD', `/api/v4/game-statistics/${game}/advanced-metrics`, {});
        }

        /**
         * Get specific game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameShow(game) {
            return await this.client.request('GET', `/api/v4/public/games/${game}`, {});
        }

        /**
         * Get specific game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameShow(game) {
            return await this.client.request('HEAD', `/api/v4/public/games/${game}`, {});
        }

        /**
         * LiveScore game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameLiveScore(game) {
            return await this.client.request('GET', `/api/v4/public/games/${game}/live-score`, {});
        }

        /**
         * LiveScore game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameLiveScore(game) {
            return await this.client.request('HEAD', `/api/v4/public/games/${game}/live-score`, {});
        }

        /**
         * LiveFeed game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getgameLiveFeed(game) {
            return await this.client.request('GET', `/api/v4/public/games/${game}/live-feed`, {});
        }

        /**
         * LiveFeed game
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headgameLiveFeed(game) {
            return await this.client.request('HEAD', `/api/v4/public/games/${game}/live-feed`, {});
        }

    }

    /**
     * Tournaments resource
     */
    class Tournaments {
        constructor(client) {
            this.client = client;
        }

        /**
         * List all tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettournamentIndex(options = {}) {
            return await this.client.request('GET', `/api/v4/tournaments`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtournamentIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v4/tournaments`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttournamentStore(options = {}) {
            return await this.client.request('POST', `/api/v4/tournaments`, { data: options.data || options });
        }

        /**
         * Get specific tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettournamentShow(tournament) {
            return await this.client.request('GET', `/api/v4/tournaments/${tournament}`, {});
        }

        /**
         * Get specific tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtournamentShow(tournament) {
            return await this.client.request('HEAD', `/api/v4/tournaments/${tournament}`, {});
        }

        /**
         * Update tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async puttournamentUpdate(tournament, options = {}) {
            return await this.client.request('PUT', `/api/v4/tournaments/${tournament}`, { data: options.data || options });
        }

        /**
         * Update tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchtournamentUpdate(tournament, options = {}) {
            return await this.client.request('PATCH', `/api/v4/tournaments/${tournament}`, { data: options.data || options });
        }

        /**
         * Delete tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deletetournamentDestroy(tournament) {
            return await this.client.request('DELETE', `/api/v4/tournaments/${tournament}`, {});
        }

        /**
         * AddTeam tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttournamentAddTeam(tournament, team) {
            return await this.client.request('POST', `/api/v4/tournaments/${tournament}/teams/${team}`, {});
        }

        /**
         * RemoveTeam tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deletetournamentRemoveTeam(tournament, team) {
            return await this.client.request('DELETE', `/api/v4/tournaments/${tournament}/teams/${team}`, {});
        }

        /**
         * GenerateBracket tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttournamentGenerateBracket(tournament) {
            return await this.client.request('POST', `/api/v4/tournaments/${tournament}/generate-bracket`, {});
        }

        /**
         * AdvanceBracket tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttournamentAdvanceBracket(tournament) {
            return await this.client.request('POST', `/api/v4/tournaments/${tournament}/advance-bracket`, {});
        }

        /**
         * Bracket tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettournamentBracket(tournament) {
            return await this.client.request('GET', `/api/v4/tournaments/${tournament}/bracket`, {});
        }

        /**
         * Bracket tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtournamentBracket(tournament) {
            return await this.client.request('HEAD', `/api/v4/tournaments/${tournament}/bracket`, {});
        }

        /**
         * Standings tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettournamentStandings(tournament) {
            return await this.client.request('GET', `/api/v4/tournaments/${tournament}/standings`, {});
        }

        /**
         * Standings tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtournamentStandings(tournament) {
            return await this.client.request('HEAD', `/api/v4/tournaments/${tournament}/standings`, {});
        }

        /**
         * Start tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttournamentStart(tournament) {
            return await this.client.request('POST', `/api/v4/tournaments/${tournament}/start`, {});
        }

        /**
         * Finish tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttournamentFinish(tournament) {
            return await this.client.request('POST', `/api/v4/tournaments/${tournament}/finish`, {});
        }

        /**
         * Predictions tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettournamentPredictions(tournament) {
            return await this.client.request('GET', `/api/v4/tournaments/${tournament}/predictions`, {});
        }

        /**
         * Predictions tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtournamentPredictions(tournament) {
            return await this.client.request('HEAD', `/api/v4/tournaments/${tournament}/predictions`, {});
        }

        /**
         * SetupLiveStream tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttournamentSetupLiveStream(tournament) {
            return await this.client.request('POST', `/api/v4/tournaments/${tournament}/live-stream`, {});
        }

        /**
         * Get specific tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettournamentShow(tournament) {
            return await this.client.request('GET', `/api/v4/public/tournaments/${tournament}`, {});
        }

        /**
         * Get specific tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtournamentShow(tournament) {
            return await this.client.request('HEAD', `/api/v4/public/tournaments/${tournament}`, {});
        }

        /**
         * Bracket tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettournamentBracket(tournament) {
            return await this.client.request('GET', `/api/v4/public/tournaments/${tournament}/bracket`, {});
        }

        /**
         * Bracket tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtournamentBracket(tournament) {
            return await this.client.request('HEAD', `/api/v4/public/tournaments/${tournament}/bracket`, {});
        }

        /**
         * Standings tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettournamentStandings(tournament) {
            return await this.client.request('GET', `/api/v4/public/tournaments/${tournament}/standings`, {});
        }

        /**
         * Standings tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtournamentStandings(tournament) {
            return await this.client.request('HEAD', `/api/v4/public/tournaments/${tournament}/standings`, {});
        }

        /**
         * LiveFeed tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettournamentLiveFeed(tournament) {
            return await this.client.request('GET', `/api/v4/public/tournaments/${tournament}/live-feed`, {});
        }

        /**
         * LiveFeed tournament
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtournamentLiveFeed(tournament) {
            return await this.client.request('HEAD', `/api/v4/public/tournaments/${tournament}/live-feed`, {});
        }

    }

    /**
     * Training resource
     */
    class Training {
        constructor(client) {
            this.client = client;
        }

        /**
         * List all training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettrainingIndex(options = {}) {
            return await this.client.request('GET', `/api/v4/trainings`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtrainingIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v4/trainings`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttrainingStore(options = {}) {
            return await this.client.request('POST', `/api/v4/trainings`, { data: options.data || options });
        }

        /**
         * Get specific training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettrainingShow(training) {
            return await this.client.request('GET', `/api/v4/trainings/${training}`, {});
        }

        /**
         * Get specific training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtrainingShow(training) {
            return await this.client.request('HEAD', `/api/v4/trainings/${training}`, {});
        }

        /**
         * Update training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async puttrainingUpdate(training, options = {}) {
            return await this.client.request('PUT', `/api/v4/trainings/${training}`, { data: options.data || options });
        }

        /**
         * Update training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchtrainingUpdate(training, options = {}) {
            return await this.client.request('PATCH', `/api/v4/trainings/${training}`, { data: options.data || options });
        }

        /**
         * Delete training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deletetrainingDestroy(training) {
            return await this.client.request('DELETE', `/api/v4/trainings/${training}`, {});
        }

        /**
         * Drills training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettrainingDrills(training) {
            return await this.client.request('GET', `/api/v4/trainings/${training}/drills`, {});
        }

        /**
         * Drills training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtrainingDrills(training) {
            return await this.client.request('HEAD', `/api/v4/trainings/${training}/drills`, {});
        }

        /**
         * AttachDrill training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttrainingAttachDrill(training, drill) {
            return await this.client.request('POST', `/api/v4/trainings/${training}/drills/${drill}/attach`, {});
        }

        /**
         * DetachDrill training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deletetrainingDetachDrill(training, drill) {
            return await this.client.request('DELETE', `/api/v4/trainings/${training}/drills/${drill}/detach`, {});
        }

        /**
         * TeamTrainings training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async gettrainingTeamTrainings(team) {
            return await this.client.request('GET', `/api/v4/teams/${team}/trainings`, {});
        }

        /**
         * TeamTrainings training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headtrainingTeamTrainings(team) {
            return await this.client.request('HEAD', `/api/v4/teams/${team}/trainings`, {});
        }

        /**
         * Duplicate training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttrainingDuplicate(training) {
            return await this.client.request('POST', `/api/v4/trainings/${training}/duplicate`, {});
        }

        /**
         * AiRecommendations training
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async posttrainingAiRecommendations(training) {
            return await this.client.request('POST', `/api/v4/trainings/${training}/ai-recommendations`, {});
        }

        /**
         * List all drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getdrillIndex(options = {}) {
            return await this.client.request('GET', `/api/v4/drills`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headdrillIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v4/drills`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postdrillStore(options = {}) {
            return await this.client.request('POST', `/api/v4/drills`, { data: options.data || options });
        }

        /**
         * Get specific drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getdrillShow(drill) {
            return await this.client.request('GET', `/api/v4/drills/${drill}`, {});
        }

        /**
         * Get specific drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headdrillShow(drill) {
            return await this.client.request('HEAD', `/api/v4/drills/${drill}`, {});
        }

        /**
         * Update drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putdrillUpdate(drill, options = {}) {
            return await this.client.request('PUT', `/api/v4/drills/${drill}`, { data: options.data || options });
        }

        /**
         * Update drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchdrillUpdate(drill, options = {}) {
            return await this.client.request('PATCH', `/api/v4/drills/${drill}`, { data: options.data || options });
        }

        /**
         * Delete drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deletedrillDestroy(drill) {
            return await this.client.request('DELETE', `/api/v4/drills/${drill}`, {});
        }

        /**
         * Search drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getdrillSearch() {
            return await this.client.request('GET', `/api/v4/drills/search`, {});
        }

        /**
         * Search drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headdrillSearch() {
            return await this.client.request('HEAD', `/api/v4/drills/search`, {});
        }

        /**
         * Categories drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getdrillCategories() {
            return await this.client.request('GET', `/api/v4/drills/categories`, {});
        }

        /**
         * Categories drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headdrillCategories() {
            return await this.client.request('HEAD', `/api/v4/drills/categories`, {});
        }

        /**
         * ByCategory drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getdrillByCategory(category) {
            return await this.client.request('GET', `/api/v4/drills/category/${category}`, {});
        }

        /**
         * ByCategory drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headdrillByCategory(category) {
            return await this.client.request('HEAD', `/api/v4/drills/category/${category}`, {});
        }

        /**
         * AiGenerated drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getdrillAiGenerated() {
            return await this.client.request('GET', `/api/v4/drills/ai-generated`, {});
        }

        /**
         * AiGenerated drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headdrillAiGenerated() {
            return await this.client.request('HEAD', `/api/v4/drills/ai-generated`, {});
        }

        /**
         * RateEffectiveness drill
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postdrillRateEffectiveness(drill) {
            return await this.client.request('POST', `/api/v4/drills/${drill}/effectiveness-rating`, {});
        }

    }

    /**
     * Analytics resource
     */
    class Analytics {
        constructor(client) {
            this.client = client;
        }

        /**
         * GetDashboardOverview mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getmLAnalyticsGetDashboardOverview() {
            return await this.client.request('GET', `/api/v4/ml-analytics/dashboard-overview`, {});
        }

        /**
         * GetDashboardOverview mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headmLAnalyticsGetDashboardOverview() {
            return await this.client.request('HEAD', `/api/v4/ml-analytics/dashboard-overview`, {});
        }

        /**
         * GetPlayerPerformanceDashboard mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getmLAnalyticsGetPlayerPerformanceDashboard() {
            return await this.client.request('GET', `/api/v4/ml-analytics/performance-dashboard`, {});
        }

        /**
         * GetPlayerPerformanceDashboard mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headmLAnalyticsGetPlayerPerformanceDashboard() {
            return await this.client.request('HEAD', `/api/v4/ml-analytics/performance-dashboard`, {});
        }

        /**
         * GetInjuryRiskDashboard mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getmLAnalyticsGetInjuryRiskDashboard() {
            return await this.client.request('GET', `/api/v4/ml-analytics/injury-dashboard`, {});
        }

        /**
         * GetInjuryRiskDashboard mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headmLAnalyticsGetInjuryRiskDashboard() {
            return await this.client.request('HEAD', `/api/v4/ml-analytics/injury-dashboard`, {});
        }

        /**
         * GetExperimentDashboard mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getmLAnalyticsGetExperimentDashboard() {
            return await this.client.request('GET', `/api/v4/ml-analytics/experiment-dashboard`, {});
        }

        /**
         * GetExperimentDashboard mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headmLAnalyticsGetExperimentDashboard() {
            return await this.client.request('HEAD', `/api/v4/ml-analytics/experiment-dashboard`, {});
        }

        /**
         * GetPredictionsTimeline mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getmLAnalyticsGetPredictionsTimeline() {
            return await this.client.request('GET', `/api/v4/ml-analytics/predictions-timeline`, {});
        }

        /**
         * GetPredictionsTimeline mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headmLAnalyticsGetPredictionsTimeline() {
            return await this.client.request('HEAD', `/api/v4/ml-analytics/predictions-timeline`, {});
        }

        /**
         * GetModelAccuracy mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getmLAnalyticsGetModelAccuracy() {
            return await this.client.request('GET', `/api/v4/ml-analytics/model-accuracy`, {});
        }

        /**
         * GetModelAccuracy mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headmLAnalyticsGetModelAccuracy() {
            return await this.client.request('HEAD', `/api/v4/ml-analytics/model-accuracy`, {});
        }

        /**
         * GetPredictionComparison mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getmLAnalyticsGetPredictionComparison() {
            return await this.client.request('GET', `/api/v4/ml-analytics/prediction-comparison`, {});
        }

        /**
         * GetPredictionComparison mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headmLAnalyticsGetPredictionComparison() {
            return await this.client.request('HEAD', `/api/v4/ml-analytics/prediction-comparison`, {});
        }

        /**
         * TeamChemistryAnalysis mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getmLAnalyticsTeamChemistryAnalysis() {
            return await this.client.request('GET', `/api/v4/ml-analytics/team-chemistry-analysis`, {});
        }

        /**
         * TeamChemistryAnalysis mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headmLAnalyticsTeamChemistryAnalysis() {
            return await this.client.request('HEAD', `/api/v4/ml-analytics/team-chemistry-analysis`, {});
        }

        /**
         * OpponentScouting mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getmLAnalyticsOpponentScouting() {
            return await this.client.request('GET', `/api/v4/ml-analytics/opponent-scouting`, {});
        }

        /**
         * OpponentScouting mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headmLAnalyticsOpponentScouting() {
            return await this.client.request('HEAD', `/api/v4/ml-analytics/opponent-scouting`, {});
        }

        /**
         * TrainCustomModel mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postmLAnalyticsTrainCustomModel() {
            return await this.client.request('POST', `/api/v4/ml-analytics/custom-model/train`, {});
        }

        /**
         * ExplainPrediction mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getmLAnalyticsExplainPrediction(prediction) {
            return await this.client.request('GET', `/api/v4/ml-analytics/prediction-explanations/${prediction}`, {});
        }

        /**
         * ExplainPrediction mlanalytics
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headmLAnalyticsExplainPrediction(prediction) {
            return await this.client.request('HEAD', `/api/v4/ml-analytics/prediction-explanations/${prediction}`, {});
        }

    }

    /**
     * Videos resource
     */
    class Videos {
        constructor(client) {
            this.client = client;
        }

        /**
         * List all videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getvideoFileIndex(options = {}) {
            return await this.client.request('GET', `/api/v4/videos`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headvideoFileIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v4/videos`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postvideoFileStore(options = {}) {
            return await this.client.request('POST', `/api/v4/videos`, { data: options.data || options });
        }

        /**
         * Get specific videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getvideoFileShow(video) {
            return await this.client.request('GET', `/api/v4/videos/${video}`, {});
        }

        /**
         * Get specific videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headvideoFileShow(video) {
            return await this.client.request('HEAD', `/api/v4/videos/${video}`, {});
        }

        /**
         * Update videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putvideoFileUpdate(video, options = {}) {
            return await this.client.request('PUT', `/api/v4/videos/${video}`, { data: options.data || options });
        }

        /**
         * Update videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchvideoFileUpdate(video, options = {}) {
            return await this.client.request('PATCH', `/api/v4/videos/${video}`, { data: options.data || options });
        }

        /**
         * Delete videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deletevideoFileDestroy(video) {
            return await this.client.request('DELETE', `/api/v4/videos/${video}`, {});
        }

        /**
         * Process videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postvideoFileProcess(video) {
            return await this.client.request('POST', `/api/v4/videos/${video}/process`, {});
        }

        /**
         * Download videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getvideoFileDownload(video) {
            return await this.client.request('GET', `/api/v4/videos/${video}/download`, {});
        }

        /**
         * Download videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headvideoFileDownload(video) {
            return await this.client.request('HEAD', `/api/v4/videos/${video}/download`, {});
        }

        /**
         * Stream videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getvideoFileStream(video) {
            return await this.client.request('GET', `/api/v4/videos/${video}/stream`, {});
        }

        /**
         * Stream videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headvideoFileStream(video) {
            return await this.client.request('HEAD', `/api/v4/videos/${video}/stream`, {});
        }

        /**
         * Analyze videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postvideoFileAnalyze(video) {
            return await this.client.request('POST', `/api/v4/videos/${video}/analyze`, {});
        }

        /**
         * AiAnalysis videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postvideoFileAiAnalysis(video) {
            return await this.client.request('POST', `/api/v4/videos/${video}/ai-analysis`, {});
        }

        /**
         * AutoHighlights videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getvideoFileAutoHighlights(video) {
            return await this.client.request('GET', `/api/v4/videos/${video}/highlights`, {});
        }

        /**
         * AutoHighlights videofile
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headvideoFileAutoHighlights(video) {
            return await this.client.request('HEAD', `/api/v4/videos/${video}/highlights`, {});
        }

        /**
         * List all videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getvideoAnnotationIndex(options = {}) {
            return await this.client.request('GET', `/api/v4/video-annotations`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headvideoAnnotationIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v4/video-annotations`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postvideoAnnotationStore(options = {}) {
            return await this.client.request('POST', `/api/v4/video-annotations`, { data: options.data || options });
        }

        /**
         * Get specific videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getvideoAnnotationShow(videoAnnotation) {
            return await this.client.request('GET', `/api/v4/video-annotations/${videoAnnotation}`, {});
        }

        /**
         * Get specific videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headvideoAnnotationShow(videoAnnotation) {
            return await this.client.request('HEAD', `/api/v4/video-annotations/${videoAnnotation}`, {});
        }

        /**
         * Update videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putvideoAnnotationUpdate(videoAnnotation, options = {}) {
            return await this.client.request('PUT', `/api/v4/video-annotations/${videoAnnotation}`, { data: options.data || options });
        }

        /**
         * Update videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchvideoAnnotationUpdate(videoAnnotation, options = {}) {
            return await this.client.request('PATCH', `/api/v4/video-annotations/${videoAnnotation}`, { data: options.data || options });
        }

        /**
         * Delete videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deletevideoAnnotationDestroy(videoAnnotation) {
            return await this.client.request('DELETE', `/api/v4/video-annotations/${videoAnnotation}`, {});
        }

        /**
         * VideoAnnotations videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getvideoAnnotationVideoAnnotations(video) {
            return await this.client.request('GET', `/api/v4/videos/${video}/annotations`, {});
        }

        /**
         * VideoAnnotations videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headvideoAnnotationVideoAnnotations(video) {
            return await this.client.request('HEAD', `/api/v4/videos/${video}/annotations`, {});
        }

        /**
         * BulkStore videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postvideoAnnotationBulkStore(video) {
            return await this.client.request('POST', `/api/v4/videos/${video}/annotations/bulk`, {});
        }

        /**
         * AiGenerate videoannotation
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postvideoAnnotationAiGenerate(video) {
            return await this.client.request('POST', `/api/v4/videos/${video}/annotations/ai-generate`, {});
        }

    }

    /**
     * Multi-tenant resource
     */
    class MultiTenant {
        constructor(client) {
            this.client = client;
        }

    }

    /**
     * Webhooks resource
     */
    class Webhooks {
        constructor(client) {
            this.client = client;
        }

        /**
         * List all webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getv4WebhookIndex(options = {}) {
            return await this.client.request('GET', `/api/v4/webhooks`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * List all webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headv4WebhookIndex(options = {}) {
            return await this.client.request('HEAD', `/api/v4/webhooks`, this.buildQueryOptions(options, ["page","per_page","search"]));
        }

        /**
         * Create new webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postv4WebhookStore(options = {}) {
            return await this.client.request('POST', `/api/v4/webhooks`, { data: options.data || options });
        }

        /**
         * Get specific webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getv4WebhookShow(webhook) {
            return await this.client.request('GET', `/api/v4/webhooks/${webhook}`, {});
        }

        /**
         * Get specific webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headv4WebhookShow(webhook) {
            return await this.client.request('HEAD', `/api/v4/webhooks/${webhook}`, {});
        }

        /**
         * Update webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async putv4WebhookUpdate(webhook, options = {}) {
            return await this.client.request('PUT', `/api/v4/webhooks/${webhook}`, { data: options.data || options });
        }

        /**
         * Update webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async patchv4WebhookUpdate(webhook, options = {}) {
            return await this.client.request('PATCH', `/api/v4/webhooks/${webhook}`, { data: options.data || options });
        }

        /**
         * Delete webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async deletev4WebhookDestroy(webhook) {
            return await this.client.request('DELETE', `/api/v4/webhooks/${webhook}`, {});
        }

        /**
         * Test webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postv4WebhookTest(webhook) {
            return await this.client.request('POST', `/api/v4/webhooks/${webhook}/test`, {});
        }

        /**
         * Deliveries webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async getv4WebhookDeliveries(webhook) {
            return await this.client.request('GET', `/api/v4/webhooks/${webhook}/deliveries`, {});
        }

        /**
         * Deliveries webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async headv4WebhookDeliveries(webhook) {
            return await this.client.request('HEAD', `/api/v4/webhooks/${webhook}/deliveries`, {});
        }

        /**
         * Redeliver webhook
         * 
         * @param {Object} options - Request options
         * @returns {Promise<Object>} Response data
         */
        async postv4WebhookRedeliver(webhook, delivery) {
            return await this.client.request('POST', `/api/v4/webhooks/${webhook}/deliveries/${delivery}/redeliver`, {});
        }

    }

    /**
     * External APIs resource
     */
    class ExternalAPIs {
        constructor(client) {
            this.client = client;
        }

    }

    /**
     * Base API Exception
     */
    class ApiException extends Error {
        constructor(message, status = 0, errors = {}) {
            super(message);
            this.name = 'ApiException';
            this.status = status;
            this.errors = errors;
        }
    }

    /**
     * Bad Request Exception (400)
     */
    class BadRequestException extends ApiException {
        constructor(message, errors = {}) {
            super(message, 400, errors);
            this.name = 'BadRequestException';
        }
    }

    /**
     * Unauthorized Exception (401)
     */
    class UnauthorizedException extends ApiException {
        constructor(message) {
            super(message, 401);
            this.name = 'UnauthorizedException';
        }
    }

    /**
     * Forbidden Exception (403)
     */
    class ForbiddenException extends ApiException {
        constructor(message) {
            super(message, 403);
            this.name = 'ForbiddenException';
        }
    }

    /**
     * Not Found Exception (404)
     */
    class NotFoundException extends ApiException {
        constructor(message) {
            super(message, 404);
            this.name = 'NotFoundException';
        }
    }

    /**
     * Validation Exception (422)
     */
    class ValidationException extends ApiException {
        constructor(message, errors = {}) {
            super(message, 422, errors);
            this.name = 'ValidationException';
        }
    }

    /**
     * Rate Limit Exception (429)
     */
    class RateLimitException extends ApiException {
        constructor(message) {
            super(message, 429);
            this.name = 'RateLimitException';
        }
    }

    // Export the client and exceptions
    return {
        BasketManagerProClient,
        ApiException,
        BadRequestException,
        UnauthorizedException,
        ForbiddenException,
        NotFoundException,
        ValidationException,
        RateLimitException
    };

}));

/**
 * Usage Example:
 * 
 * // Node.js/CommonJS
 * const { BasketManagerProClient } = require('./basketmanager-pro-sdk');
 * const client = new BasketManagerProClient('your-api-key');
 * 
 * // ES6 Modules
 * import { BasketManagerProClient } from './basketmanager-pro-sdk.js';
 * const client = new BasketManagerProClient('your-api-key');
 * 
 * // Browser
 * <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
 * <script src="basketmanager-pro-sdk.js"></script>
 * <script>
 *   const client = new BasketManagerPro.BasketManagerProClient('your-api-key');
 * </script>
 * 
 * // Examples
 * try {
 *   // List teams
 *   const teams = await client.teams.index({ page: 1, per_page: 20 });
 *   console.log('Teams:', teams);
 * 
 *   // Get specific team
 *   const team = await client.teams.show(1);
 *   console.log('Team:', team);
 * 
 *   // Create new player
 *   const newPlayer = await client.players.store({
 *     first_name: 'John',
 *     last_name: 'Doe',
 *     jersey_number: 23,
 *     position: 'SF',
 *     team_id: 1
 *   });
 *   console.log('New player:', newPlayer);
 * 
 *   // Get live game data
 *   const liveGame = await client.games.liveScore(123);
 *   console.log('Live score:', liveGame);
 * 
 * } catch (error) {
 *   if (error instanceof ValidationException) {
 *     console.error('Validation errors:', error.errors);
 *   } else {
 *     console.error('API error:', error.message);
 *   }
 * }
 */
