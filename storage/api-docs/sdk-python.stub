"""
BasketManager Pro API Python SDK

Enterprise Basketball Club Management API with multi-tenant architecture, real-time scoring, and comprehensive statistics.

API Version: 4.0
SDK Version: 1.0.0
Generated: {date('Y-m-d H:i:s')} UTC

@package BasketManagerPro
@author Auto-generated from OpenAPI specification
@link https://basketmanager-pro.com/api/documentation
"""
import requests
import json
from typing import Dict, List, Optional, Union, Any
from urllib.parse import urljoin, urlencode
from datetime import datetime

class ApiException(Exception):
    """Base API Exception"""
    
    def __init__(self, message: str, status_code: int = 0, errors: Optional[Dict] = None):
        super().__init__(message)
        self.status_code = status_code
        self.errors = errors or {}


class BadRequestException(ApiException):
    """Bad Request Exception (400)"""
    
    def __init__(self, message: str, errors: Optional[Dict] = None):
        super().__init__(message, 400, errors)


class UnauthorizedException(ApiException):
    """Unauthorized Exception (401)"""
    
    def __init__(self, message: str):
        super().__init__(message, 401)


class ForbiddenException(ApiException):
    """Forbidden Exception (403)"""
    
    def __init__(self, message: str):
        super().__init__(message, 403)


class NotFoundException(ApiException):
    """Not Found Exception (404)"""
    
    def __init__(self, message: str):
        super().__init__(message, 404)


class ValidationException(ApiException):
    """Validation Exception (422)"""
    
    def __init__(self, message: str, errors: Optional[Dict] = None):
        super().__init__(message, 422, errors)


class RateLimitException(ApiException):
    """Rate Limit Exception (429)"""
    
    def __init__(self, message: str):
        super().__init__(message, 429)

class BasketManagerProClient:
    """BasketManager Pro API Client"""
    
    def __init__(self, api_key: str, base_url: str = "https://staging.basketmanager-pro.de/api", timeout: int = 30):
        """
        Initialize the API client
        
        Args:
            api_key: Your API key
            base_url: Optional custom base URL
            timeout: Request timeout in seconds
        """
        self.api_key = api_key
        self.base_url = base_url.rstrip('/')
        self.timeout = timeout
        self.sdk_version = "1.0.0"
        
        # Default headers
        self.default_headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'User-Agent': f'BasketManagerPro-Python-SDK/{self.sdk_version}'
        }
        
        # Initialize session
        self.session = requests.Session()
        self.session.headers.update(self.default_headers)
        
        # Initialize resource classes
        self.teams = Teams(self)
        self.players = Players(self)
        self.games = Games(self)
        self.clubs = Clubs(self)
        self.tournaments = Tournaments(self)
        self.training = Training(self)
        self.videos = Videos(self)
        self.analytics = Analytics(self)
    
    def request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
        """
        Make HTTP request to the API
        
        Args:
            method: HTTP method
            endpoint: API endpoint
            **kwargs: Additional request arguments
            
        Returns:
            Response data as dictionary
            
        Raises:
            ApiException: For API errors
        """
        url = urljoin(self.base_url, endpoint.lstrip('/'))
        
        try:
            response = self.session.request(
                method.upper(),
                url,
                timeout=self.timeout,
                **kwargs
            )
            
            return self._handle_response(response)
            
        except requests.exceptions.RequestException as e:
            raise ApiException(f"HTTP request failed: {str(e)}")
    
    def _handle_response(self, response: requests.Response) -> Dict[str, Any]:
        """Handle API response"""
        try:
            data = response.json()
        except json.JSONDecodeError:
            data = {}
        
        if 200 <= response.status_code < 300:
            return data
        
        # Handle error responses
        message = data.get('message', 'Unknown API error')
        errors = data.get('errors', {})
        
        if response.status_code == 400:
            raise BadRequestException(message, errors)
        elif response.status_code == 401:
            raise UnauthorizedException(message)
        elif response.status_code == 403:
            raise ForbiddenException(message)
        elif response.status_code == 404:
            raise NotFoundException(message)
        elif response.status_code == 422:
            raise ValidationException(message, errors)
        elif response.status_code == 429:
            raise RateLimitException(message)
        else:
            raise ApiException(message, response.status_code, errors)
    
    def set_api_key(self, api_key: str) -> None:
        """Update API key"""
        self.api_key = api_key
        self.session.headers['Authorization'] = f'Bearer {api_key}'
    
    def get_sdk_version(self) -> str:
        """Get SDK version"""
        return self.sdk_version
    
    def get_base_url(self) -> str:
        """Get API base URL"""
        return self.base_url
    
    def ping(self) -> Dict[str, Any]:
        """
        Test API connection
        
        Returns:
            API status information
        """
        return self.request('GET', '/v4/documentation/ping')


class Authentication:
    """Authentication resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client

    def postauth_login(self, ) -> Dict[str, Any]:
        """
        Login auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/auth/login"
        return self.client.request('POST', endpoint, **kwargs)

    def postauth_register(self, ) -> Dict[str, Any]:
        """
        Register auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/auth/register"
        return self.client.request('POST', endpoint, **kwargs)

    def postauth_logout(self, ) -> Dict[str, Any]:
        """
        Logout auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/auth/logout"
        return self.client.request('POST', endpoint, **kwargs)

    def postauth_refresh(self, ) -> Dict[str, Any]:
        """
        Refresh auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/auth/refresh"
        return self.client.request('POST', endpoint, **kwargs)

    def getauth_user(self, ) -> Dict[str, Any]:
        """
        User auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/auth/user"
        return self.client.request('GET', endpoint, **kwargs)

    def headauth_user(self, ) -> Dict[str, Any]:
        """
        User auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/auth/user"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postauth_login(self, ) -> Dict[str, Any]:
        """
        Login auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/auth/login"
        return self.client.request('POST', endpoint, **kwargs)

    def postauth_register(self, ) -> Dict[str, Any]:
        """
        Register auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/auth/register"
        return self.client.request('POST', endpoint, **kwargs)

    def postauth_logout(self, ) -> Dict[str, Any]:
        """
        Logout auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/auth/logout"
        return self.client.request('POST', endpoint, **kwargs)

    def postauth_refresh(self, ) -> Dict[str, Any]:
        """
        Refresh auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/auth/refresh"
        return self.client.request('POST', endpoint, **kwargs)

    def getauth_user(self, ) -> Dict[str, Any]:
        """
        User auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/auth/user"
        return self.client.request('GET', endpoint, **kwargs)

    def headauth_user(self, ) -> Dict[str, Any]:
        """
        User auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/auth/user"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postauth_forgot_password(self, ) -> Dict[str, Any]:
        """
        ForgotPassword auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/auth/forgot-password"
        return self.client.request('POST', endpoint, **kwargs)

    def postauth_reset_password(self, ) -> Dict[str, Any]:
        """
        ResetPassword auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/auth/reset-password"
        return self.client.request('POST', endpoint, **kwargs)

    def postauth_verify_email(self, ) -> Dict[str, Any]:
        """
        VerifyEmail auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/auth/verify-email"
        return self.client.request('POST', endpoint, **kwargs)

    def postauth_resend_verification(self, ) -> Dict[str, Any]:
        """
        ResendVerification auth
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/auth/resend-verification"
        return self.client.request('POST', endpoint, **kwargs)


class Teams:
    """Teams resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client

    def getteam_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postteam_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams"
        return self.client.request('POST', endpoint, **kwargs)

    def getteam_show(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams/{team}"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_show(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams/{team}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putteam_update(self, team: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams/{team}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchteam_update(self, team: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams/{team}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def getteam_players(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Players team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams/{team}/players"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_players(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Players team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams/{team}/players"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_games(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Games team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams/{team}/games"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_games(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Games team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/teams/{team}/games"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_show(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/public/teams/{team}"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_show(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/public/teams/{team}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_players(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Players team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/public/teams/{team}/players"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_players(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Players team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/public/teams/{team}/players"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postteam_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams"
        return self.client.request('POST', endpoint, **kwargs)

    def getteam_show(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_show(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putteam_update(self, team: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchteam_update(self, team: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def deleteteam_destroy(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Delete team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def getteam_players(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Players team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/players"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_players(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Players team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/players"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_games(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Games team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/games"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_games(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Games team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/games"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_statistics(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Statistics team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/statistics"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_statistics(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Statistics team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/statistics"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_analytics(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Analytics team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/analytics"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_analytics(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Analytics team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/analytics"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postteam_invite_player(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        InvitePlayer team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/invite-player"
        return self.client.request('POST', endpoint, **kwargs)

    def getteam_performance_trends(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        PerformanceTrends team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/performance-trends"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_performance_trends(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        PerformanceTrends team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/performance-trends"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_show(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/teams/{team}"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_show(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/teams/{team}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_players(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Players team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/teams/{team}/players"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_players(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Players team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/teams/{team}/players"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_games(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Games team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/teams/{team}/games"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_games(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        Games team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/teams/{team}/games"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getteam_public_stats(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        PublicStats team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/teams/{team}/public-stats"
        return self.client.request('GET', endpoint, **kwargs)

    def headteam_public_stats(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        PublicStats team
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/teams/{team}/public-stats"
        return self.client.request('HEAD', endpoint, **kwargs)


class Players:
    """Players resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client

    def getplayer_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/players"
        return self.client.request('GET', endpoint, **kwargs)

    def headplayer_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/players"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postplayer_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/players"
        return self.client.request('POST', endpoint, **kwargs)

    def getplayer_show(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/players/{player}"
        return self.client.request('GET', endpoint, **kwargs)

    def headplayer_show(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/players/{player}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putplayer_update(self, player: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/players/{player}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchplayer_update(self, player: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/players/{player}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def getplayer_games(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Games player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/players/{player}/games"
        return self.client.request('GET', endpoint, **kwargs)

    def headplayer_games(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Games player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/players/{player}/games"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getplayer_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players"
        return self.client.request('GET', endpoint, **kwargs)

    def headplayer_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postplayer_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players"
        return self.client.request('POST', endpoint, **kwargs)

    def getplayer_show(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}"
        return self.client.request('GET', endpoint, **kwargs)

    def headplayer_show(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putplayer_update(self, player: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchplayer_update(self, player: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def deleteplayer_destroy(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Delete player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def getplayer_statistics(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Statistics player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/statistics"
        return self.client.request('GET', endpoint, **kwargs)

    def headplayer_statistics(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Statistics player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/statistics"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getplayer_games(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Games player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/games"
        return self.client.request('GET', endpoint, **kwargs)

    def headplayer_games(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Games player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/games"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postplayer_transfer(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Transfer player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/transfer"
        return self.client.request('POST', endpoint, **kwargs)

    def getplayer_analytics(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Analytics player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/analytics"
        return self.client.request('GET', endpoint, **kwargs)

    def headplayer_analytics(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        Analytics player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/analytics"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getplayer_injury_risk(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        InjuryRisk player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/injury-risk"
        return self.client.request('GET', endpoint, **kwargs)

    def headplayer_injury_risk(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        InjuryRisk player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/injury-risk"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getplayer_performance_predictions(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        PerformancePredictions player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/performance-predictions"
        return self.client.request('GET', endpoint, **kwargs)

    def headplayer_performance_predictions(self, player: Union[int, str]) -> Dict[str, Any]:
        """
        PerformancePredictions player
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/players/{player}/performance-predictions"
        return self.client.request('HEAD', endpoint, **kwargs)


class Games:
    """Games resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client

    def getgame_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/games"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/games"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postgame_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/games"
        return self.client.request('POST', endpoint, **kwargs)

    def getgame_show(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/games/{game}"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_show(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/games/{game}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putgame_update(self, game: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/games/{game}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchgame_update(self, game: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/games/{game}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def getgame_live_score(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        LiveScore game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/games/{game}/live-score"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_live_score(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        LiveScore game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/games/{game}/live-score"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getgame_show(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/public/games/{game}"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_show(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/public/games/{game}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getgame_live_score(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        LiveScore game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/public/games/{game}/live-score"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_live_score(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        LiveScore game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v1/public/games/{game}/live-score"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getgame_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postgame_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games"
        return self.client.request('POST', endpoint, **kwargs)

    def getgame_show(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games/{game}"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_show(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games/{game}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putgame_update(self, game: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games/{game}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchgame_update(self, game: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games/{game}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def deletegame_destroy(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        Delete game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games/{game}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def getgame_live_score(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        LiveScore game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games/{game}/live-score"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_live_score(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        LiveScore game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games/{game}/live-score"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getgame_real_time_data(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        RealTimeData game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games/{game}/real-time-data"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_real_time_data(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        RealTimeData game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games/{game}/real-time-data"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postgame_start_broadcast(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        StartBroadcast game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/games/{game}/broadcast"
        return self.client.request('POST', endpoint, **kwargs)

    def getgame_statistic_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_statistic_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postgame_statistic_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics"
        return self.client.request('POST', endpoint, **kwargs)

    def getgame_statistic_show(self, game_statistic: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics/{game_statistic}"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_statistic_show(self, game_statistic: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics/{game_statistic}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putgame_statistic_update(self, game_statistic: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics/{game_statistic}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchgame_statistic_update(self, game_statistic: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics/{game_statistic}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def deletegame_statistic_destroy(self, game_statistic: Union[int, str]) -> Dict[str, Any]:
        """
        Delete gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics/{game_statistic}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def postgame_statistic_bulk_store(self, ) -> Dict[str, Any]:
        """
        BulkStore gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics/bulk"
        return self.client.request('POST', endpoint, **kwargs)

    def getgame_statistic_player_game_stats(self, game: Union[int, str], player: Union[int, str]) -> Dict[str, Any]:
        """
        PlayerGameStats gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics/{game}/player/{player}"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_statistic_player_game_stats(self, game: Union[int, str], player: Union[int, str]) -> Dict[str, Any]:
        """
        PlayerGameStats gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics/{game}/player/{player}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getgame_statistic_advanced_metrics(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        AdvancedMetrics gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics/{game}/advanced-metrics"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_statistic_advanced_metrics(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        AdvancedMetrics gamestatistic
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/game-statistics/{game}/advanced-metrics"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getgame_show(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/games/{game}"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_show(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/games/{game}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getgame_live_score(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        LiveScore game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/games/{game}/live-score"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_live_score(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        LiveScore game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/games/{game}/live-score"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getgame_live_feed(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        LiveFeed game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/games/{game}/live-feed"
        return self.client.request('GET', endpoint, **kwargs)

    def headgame_live_feed(self, game: Union[int, str]) -> Dict[str, Any]:
        """
        LiveFeed game
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/games/{game}/live-feed"
        return self.client.request('HEAD', endpoint, **kwargs)


class Tournaments:
    """Tournaments resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client

    def gettournament_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments"
        return self.client.request('GET', endpoint, **kwargs)

    def headtournament_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments"
        return self.client.request('HEAD', endpoint, **kwargs)

    def posttournament_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments"
        return self.client.request('POST', endpoint, **kwargs)

    def gettournament_show(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}"
        return self.client.request('GET', endpoint, **kwargs)

    def headtournament_show(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def puttournament_update(self, tournament: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchtournament_update(self, tournament: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def deletetournament_destroy(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Delete tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def posttournament_add_team(self, tournament: Union[int, str], team: Union[int, str]) -> Dict[str, Any]:
        """
        AddTeam tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/teams/{team}"
        return self.client.request('POST', endpoint, **kwargs)

    def deletetournament_remove_team(self, tournament: Union[int, str], team: Union[int, str]) -> Dict[str, Any]:
        """
        RemoveTeam tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/teams/{team}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def posttournament_generate_bracket(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        GenerateBracket tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/generate-bracket"
        return self.client.request('POST', endpoint, **kwargs)

    def posttournament_advance_bracket(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        AdvanceBracket tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/advance-bracket"
        return self.client.request('POST', endpoint, **kwargs)

    def gettournament_bracket(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Bracket tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/bracket"
        return self.client.request('GET', endpoint, **kwargs)

    def headtournament_bracket(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Bracket tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/bracket"
        return self.client.request('HEAD', endpoint, **kwargs)

    def gettournament_standings(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Standings tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/standings"
        return self.client.request('GET', endpoint, **kwargs)

    def headtournament_standings(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Standings tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/standings"
        return self.client.request('HEAD', endpoint, **kwargs)

    def posttournament_start(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Start tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/start"
        return self.client.request('POST', endpoint, **kwargs)

    def posttournament_finish(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Finish tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/finish"
        return self.client.request('POST', endpoint, **kwargs)

    def gettournament_predictions(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Predictions tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/predictions"
        return self.client.request('GET', endpoint, **kwargs)

    def headtournament_predictions(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Predictions tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/predictions"
        return self.client.request('HEAD', endpoint, **kwargs)

    def posttournament_setup_live_stream(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        SetupLiveStream tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/tournaments/{tournament}/live-stream"
        return self.client.request('POST', endpoint, **kwargs)

    def gettournament_show(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/tournaments/{tournament}"
        return self.client.request('GET', endpoint, **kwargs)

    def headtournament_show(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/tournaments/{tournament}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def gettournament_bracket(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Bracket tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/tournaments/{tournament}/bracket"
        return self.client.request('GET', endpoint, **kwargs)

    def headtournament_bracket(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Bracket tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/tournaments/{tournament}/bracket"
        return self.client.request('HEAD', endpoint, **kwargs)

    def gettournament_standings(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Standings tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/tournaments/{tournament}/standings"
        return self.client.request('GET', endpoint, **kwargs)

    def headtournament_standings(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        Standings tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/tournaments/{tournament}/standings"
        return self.client.request('HEAD', endpoint, **kwargs)

    def gettournament_live_feed(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        LiveFeed tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/tournaments/{tournament}/live-feed"
        return self.client.request('GET', endpoint, **kwargs)

    def headtournament_live_feed(self, tournament: Union[int, str]) -> Dict[str, Any]:
        """
        LiveFeed tournament
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/public/tournaments/{tournament}/live-feed"
        return self.client.request('HEAD', endpoint, **kwargs)


class Training:
    """Training resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client

    def gettraining_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings"
        return self.client.request('GET', endpoint, **kwargs)

    def headtraining_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings"
        return self.client.request('HEAD', endpoint, **kwargs)

    def posttraining_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings"
        return self.client.request('POST', endpoint, **kwargs)

    def gettraining_show(self, training: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}"
        return self.client.request('GET', endpoint, **kwargs)

    def headtraining_show(self, training: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def puttraining_update(self, training: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchtraining_update(self, training: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def deletetraining_destroy(self, training: Union[int, str]) -> Dict[str, Any]:
        """
        Delete training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def gettraining_drills(self, training: Union[int, str]) -> Dict[str, Any]:
        """
        Drills training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}/drills"
        return self.client.request('GET', endpoint, **kwargs)

    def headtraining_drills(self, training: Union[int, str]) -> Dict[str, Any]:
        """
        Drills training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}/drills"
        return self.client.request('HEAD', endpoint, **kwargs)

    def posttraining_attach_drill(self, training: Union[int, str], drill: Union[int, str]) -> Dict[str, Any]:
        """
        AttachDrill training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}/drills/{drill}/attach"
        return self.client.request('POST', endpoint, **kwargs)

    def deletetraining_detach_drill(self, training: Union[int, str], drill: Union[int, str]) -> Dict[str, Any]:
        """
        DetachDrill training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}/drills/{drill}/detach"
        return self.client.request('DELETE', endpoint, **kwargs)

    def gettraining_team_trainings(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        TeamTrainings training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/trainings"
        return self.client.request('GET', endpoint, **kwargs)

    def headtraining_team_trainings(self, team: Union[int, str]) -> Dict[str, Any]:
        """
        TeamTrainings training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/teams/{team}/trainings"
        return self.client.request('HEAD', endpoint, **kwargs)

    def posttraining_duplicate(self, training: Union[int, str]) -> Dict[str, Any]:
        """
        Duplicate training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}/duplicate"
        return self.client.request('POST', endpoint, **kwargs)

    def posttraining_ai_recommendations(self, training: Union[int, str]) -> Dict[str, Any]:
        """
        AiRecommendations training
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/trainings/{training}/ai-recommendations"
        return self.client.request('POST', endpoint, **kwargs)

    def getdrill_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills"
        return self.client.request('GET', endpoint, **kwargs)

    def headdrill_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postdrill_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills"
        return self.client.request('POST', endpoint, **kwargs)

    def getdrill_show(self, drill: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/{drill}"
        return self.client.request('GET', endpoint, **kwargs)

    def headdrill_show(self, drill: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/{drill}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putdrill_update(self, drill: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/{drill}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchdrill_update(self, drill: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/{drill}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def deletedrill_destroy(self, drill: Union[int, str]) -> Dict[str, Any]:
        """
        Delete drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/{drill}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def getdrill_search(self, ) -> Dict[str, Any]:
        """
        Search drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/search"
        return self.client.request('GET', endpoint, **kwargs)

    def headdrill_search(self, ) -> Dict[str, Any]:
        """
        Search drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/search"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getdrill_categories(self, ) -> Dict[str, Any]:
        """
        Categories drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/categories"
        return self.client.request('GET', endpoint, **kwargs)

    def headdrill_categories(self, ) -> Dict[str, Any]:
        """
        Categories drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/categories"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getdrill_by_category(self, category: Union[int, str]) -> Dict[str, Any]:
        """
        ByCategory drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/category/{category}"
        return self.client.request('GET', endpoint, **kwargs)

    def headdrill_by_category(self, category: Union[int, str]) -> Dict[str, Any]:
        """
        ByCategory drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/category/{category}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getdrill_ai_generated(self, ) -> Dict[str, Any]:
        """
        AiGenerated drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/ai-generated"
        return self.client.request('GET', endpoint, **kwargs)

    def headdrill_ai_generated(self, ) -> Dict[str, Any]:
        """
        AiGenerated drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/ai-generated"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postdrill_rate_effectiveness(self, drill: Union[int, str]) -> Dict[str, Any]:
        """
        RateEffectiveness drill
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/drills/{drill}/effectiveness-rating"
        return self.client.request('POST', endpoint, **kwargs)


class Analytics:
    """Analytics resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client

    def getm_l_analytics_get_dashboard_overview(self, ) -> Dict[str, Any]:
        """
        GetDashboardOverview mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/dashboard-overview"
        return self.client.request('GET', endpoint, **kwargs)

    def headm_l_analytics_get_dashboard_overview(self, ) -> Dict[str, Any]:
        """
        GetDashboardOverview mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/dashboard-overview"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getm_l_analytics_get_player_performance_dashboard(self, ) -> Dict[str, Any]:
        """
        GetPlayerPerformanceDashboard mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/performance-dashboard"
        return self.client.request('GET', endpoint, **kwargs)

    def headm_l_analytics_get_player_performance_dashboard(self, ) -> Dict[str, Any]:
        """
        GetPlayerPerformanceDashboard mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/performance-dashboard"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getm_l_analytics_get_injury_risk_dashboard(self, ) -> Dict[str, Any]:
        """
        GetInjuryRiskDashboard mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/injury-dashboard"
        return self.client.request('GET', endpoint, **kwargs)

    def headm_l_analytics_get_injury_risk_dashboard(self, ) -> Dict[str, Any]:
        """
        GetInjuryRiskDashboard mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/injury-dashboard"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getm_l_analytics_get_experiment_dashboard(self, ) -> Dict[str, Any]:
        """
        GetExperimentDashboard mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/experiment-dashboard"
        return self.client.request('GET', endpoint, **kwargs)

    def headm_l_analytics_get_experiment_dashboard(self, ) -> Dict[str, Any]:
        """
        GetExperimentDashboard mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/experiment-dashboard"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getm_l_analytics_get_predictions_timeline(self, ) -> Dict[str, Any]:
        """
        GetPredictionsTimeline mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/predictions-timeline"
        return self.client.request('GET', endpoint, **kwargs)

    def headm_l_analytics_get_predictions_timeline(self, ) -> Dict[str, Any]:
        """
        GetPredictionsTimeline mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/predictions-timeline"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getm_l_analytics_get_model_accuracy(self, ) -> Dict[str, Any]:
        """
        GetModelAccuracy mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/model-accuracy"
        return self.client.request('GET', endpoint, **kwargs)

    def headm_l_analytics_get_model_accuracy(self, ) -> Dict[str, Any]:
        """
        GetModelAccuracy mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/model-accuracy"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getm_l_analytics_get_prediction_comparison(self, ) -> Dict[str, Any]:
        """
        GetPredictionComparison mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/prediction-comparison"
        return self.client.request('GET', endpoint, **kwargs)

    def headm_l_analytics_get_prediction_comparison(self, ) -> Dict[str, Any]:
        """
        GetPredictionComparison mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/prediction-comparison"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getm_l_analytics_team_chemistry_analysis(self, ) -> Dict[str, Any]:
        """
        TeamChemistryAnalysis mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/team-chemistry-analysis"
        return self.client.request('GET', endpoint, **kwargs)

    def headm_l_analytics_team_chemistry_analysis(self, ) -> Dict[str, Any]:
        """
        TeamChemistryAnalysis mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/team-chemistry-analysis"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getm_l_analytics_opponent_scouting(self, ) -> Dict[str, Any]:
        """
        OpponentScouting mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/opponent-scouting"
        return self.client.request('GET', endpoint, **kwargs)

    def headm_l_analytics_opponent_scouting(self, ) -> Dict[str, Any]:
        """
        OpponentScouting mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/opponent-scouting"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postm_l_analytics_train_custom_model(self, ) -> Dict[str, Any]:
        """
        TrainCustomModel mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/custom-model/train"
        return self.client.request('POST', endpoint, **kwargs)

    def getm_l_analytics_explain_prediction(self, prediction: Union[int, str]) -> Dict[str, Any]:
        """
        ExplainPrediction mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/prediction-explanations/{prediction}"
        return self.client.request('GET', endpoint, **kwargs)

    def headm_l_analytics_explain_prediction(self, prediction: Union[int, str]) -> Dict[str, Any]:
        """
        ExplainPrediction mlanalytics
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/ml-analytics/prediction-explanations/{prediction}"
        return self.client.request('HEAD', endpoint, **kwargs)


class Videos:
    """Videos resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client

    def getvideo_file_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos"
        return self.client.request('GET', endpoint, **kwargs)

    def headvideo_file_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postvideo_file_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos"
        return self.client.request('POST', endpoint, **kwargs)

    def getvideo_file_show(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}"
        return self.client.request('GET', endpoint, **kwargs)

    def headvideo_file_show(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putvideo_file_update(self, video: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchvideo_file_update(self, video: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def deletevideo_file_destroy(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        Delete videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def postvideo_file_process(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        Process videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/process"
        return self.client.request('POST', endpoint, **kwargs)

    def getvideo_file_download(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        Download videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/download"
        return self.client.request('GET', endpoint, **kwargs)

    def headvideo_file_download(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        Download videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/download"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getvideo_file_stream(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        Stream videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/stream"
        return self.client.request('GET', endpoint, **kwargs)

    def headvideo_file_stream(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        Stream videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/stream"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postvideo_file_analyze(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        Analyze videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/analyze"
        return self.client.request('POST', endpoint, **kwargs)

    def postvideo_file_ai_analysis(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        AiAnalysis videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/ai-analysis"
        return self.client.request('POST', endpoint, **kwargs)

    def getvideo_file_auto_highlights(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        AutoHighlights videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/highlights"
        return self.client.request('GET', endpoint, **kwargs)

    def headvideo_file_auto_highlights(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        AutoHighlights videofile
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/highlights"
        return self.client.request('HEAD', endpoint, **kwargs)

    def getvideo_annotation_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/video-annotations"
        return self.client.request('GET', endpoint, **kwargs)

    def headvideo_annotation_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/video-annotations"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postvideo_annotation_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/video-annotations"
        return self.client.request('POST', endpoint, **kwargs)

    def getvideo_annotation_show(self, video_annotation: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/video-annotations/{video_annotation}"
        return self.client.request('GET', endpoint, **kwargs)

    def headvideo_annotation_show(self, video_annotation: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/video-annotations/{video_annotation}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putvideo_annotation_update(self, video_annotation: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/video-annotations/{video_annotation}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchvideo_annotation_update(self, video_annotation: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/video-annotations/{video_annotation}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def deletevideo_annotation_destroy(self, video_annotation: Union[int, str]) -> Dict[str, Any]:
        """
        Delete videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/video-annotations/{video_annotation}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def getvideo_annotation_video_annotations(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        VideoAnnotations videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/annotations"
        return self.client.request('GET', endpoint, **kwargs)

    def headvideo_annotation_video_annotations(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        VideoAnnotations videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/annotations"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postvideo_annotation_bulk_store(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        BulkStore videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/annotations/bulk"
        return self.client.request('POST', endpoint, **kwargs)

    def postvideo_annotation_ai_generate(self, video: Union[int, str]) -> Dict[str, Any]:
        """
        AiGenerate videoannotation
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/videos/{video}/annotations/ai-generate"
        return self.client.request('POST', endpoint, **kwargs)


class MultiTenant:
    """Multi-tenant resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client


class Webhooks:
    """Webhooks resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client

    def getv4_webhook_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks"
        return self.client.request('GET', endpoint, **kwargs)

    def headv4_webhook_index(self, **kwargs) -> Dict[str, Any]:
        """
        List all webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postv4_webhook_store(self, **kwargs) -> Dict[str, Any]:
        """
        Create new webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks"
        return self.client.request('POST', endpoint, **kwargs)

    def getv4_webhook_show(self, webhook: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks/{webhook}"
        return self.client.request('GET', endpoint, **kwargs)

    def headv4_webhook_show(self, webhook: Union[int, str]) -> Dict[str, Any]:
        """
        Get specific webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks/{webhook}"
        return self.client.request('HEAD', endpoint, **kwargs)

    def putv4_webhook_update(self, webhook: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks/{webhook}"
        return self.client.request('PUT', endpoint, **kwargs)

    def patchv4_webhook_update(self, webhook: Union[int, str], **kwargs) -> Dict[str, Any]:
        """
        Update webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks/{webhook}"
        return self.client.request('PATCH', endpoint, **kwargs)

    def deletev4_webhook_destroy(self, webhook: Union[int, str]) -> Dict[str, Any]:
        """
        Delete webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks/{webhook}"
        return self.client.request('DELETE', endpoint, **kwargs)

    def postv4_webhook_test(self, webhook: Union[int, str]) -> Dict[str, Any]:
        """
        Test webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks/{webhook}/test"
        return self.client.request('POST', endpoint, **kwargs)

    def getv4_webhook_deliveries(self, webhook: Union[int, str]) -> Dict[str, Any]:
        """
        Deliveries webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks/{webhook}/deliveries"
        return self.client.request('GET', endpoint, **kwargs)

    def headv4_webhook_deliveries(self, webhook: Union[int, str]) -> Dict[str, Any]:
        """
        Deliveries webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks/{webhook}/deliveries"
        return self.client.request('HEAD', endpoint, **kwargs)

    def postv4_webhook_redeliver(self, webhook: Union[int, str], delivery: Union[int, str]) -> Dict[str, Any]:
        """
        Redeliver webhook
        
        Returns:
            Response data as dictionary
        """
        endpoint = f"/api/v4/webhooks/{webhook}/deliveries/{delivery}/redeliver"
        return self.client.request('POST', endpoint, **kwargs)


class ExternalAPIs:
    """External APIs resource"""
    
    def __init__(self, client: BasketManagerProClient):
        self.client = client

